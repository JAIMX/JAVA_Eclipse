package bap;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.jorlib.demo.frameworks.columnGeneration.cuttingStockCG.cg.PricingProblem;
import org.jorlib.frameworks.columnGeneration.branchAndPrice.AbstractBranchAndPrice;
import org.jorlib.frameworks.columnGeneration.branchAndPrice.AbstractBranchCreator;
import org.jorlib.frameworks.columnGeneration.branchAndPrice.BAPNode;
import org.jorlib.frameworks.columnGeneration.io.TimeLimitExceededException;
import org.jorlib.frameworks.columnGeneration.master.MasterData;
import org.jorlib.frameworks.columnGeneration.master.OptimizationSense;
import org.jorlib.frameworks.columnGeneration.pricing.AbstractPricingProblemSolver;
import org.jorlib.frameworks.columnGeneration.util.MathProgrammingUtil;

import cg.Cycle;
import cg.SNDRCPricingProblem;
import cg.master.Master;
import cg.master.SNDRCMasterData;
import ilog.concert.IloRange;
import model.SNDRC;

public class BranchAndPrice extends AbstractBranchAndPrice<SNDRC, Cycle, SNDRCPricingProblem>{
	
	private double thresholdValue;
	private SNDRCMasterData masterData;

	public BranchAndPrice(SNDRC modelData,Master master,List<SNDRCPricingProblem> pricingProblems,List<Class<? extends AbstractPricingProblemSolver<SNDRC, Cycle,SNDRCPricingProblem>>> solvers,List<? extends AbstractBranchCreator<SNDRC, Cycle, SNDRCPricingProblem>> branchCreators,double objectiveInitialSolution,double thresholdValue,SNDRCMasterData masterData) {
		super(modelData,master,pricingProblems,solvers,branchCreators,0,objectiveInitialSolution);
//		this.warmStart(objectiveInitialSolution,initialSolution);
		this.thresholdValue=thresholdValue;
		this.masterData=masterData;
	}
	
	
    /**
     * Generates an artificial solution. Columns in the artificial solution are of high cost such that they never end up in the final solution
     * if a feasible solution exists, since any feasible solution is assumed to be cheaper than the artificial solution. The artificial solution is used
     * to guarantee that the master problem has a feasible solution.
     *
     * @return artificial solution
     */
    @Override
    protected List<Cycle> generateInitialFeasibleSolution(BAPNode<SNDRC,Cycle> node) {
    	
    	List<Cycle> artificalVars=new ArrayList<Cycle>();
    	// for weak forcing constraints
    	for(int edgeIndex=0;edgeIndex<dataModel.numServiceArc;edgeIndex++) {
    		Set<Integer> set=new HashSet<>();
    		set.add(edgeIndex);
    		Cycle cycle=new Cycle(pricingProblems.get(0),true,"Artificial",set,100000000,0,0);
    		artificalVars.add(cycle);
    	}
    	
    	// for resource bound constraints
    	int count=0;
    	for(int capacityType=0;capacityType<dataModel.numOfCapacity;capacityType++) {
    		for(int originNode=0;originNode<dataModel.numNode;originNode++) {
    			Set<Integer> set=new HashSet<>();
    			Cycle cycle=new Cycle(pricingProblems.get(count), true, "Artificial", set, 100000000, 0, 1);
    			artificalVars.add(cycle);
    			count++;
    		}
    	}
    
        return artificalVars;
    }
    
    
    /**
     * Checks whether the given node is integer
     * @param node Node in the Branch-and-Price tree
     * @return true if the solution is an integer solution
     */
    @Override
    protected boolean isIntegerNode(BAPNode<SNDRC,Cycle> node) {
    	List<Cycle> result=node.getSolution();
    	
    	boolean out=true;
    	for(Cycle cycle:result) {
    		if(MathProgrammingUtil.isFractional(cycle.value)) {
    			out=false;
    			break;
    		}
    	}
    	
    	return out;
    }
    
    
    
    
	/**
	 * Starts running the Branch-and-Price algorithm.
	 * Note: In the current version of the code, one should not invoke this function multiple times on the same instance!
	 * @param timeLimit Future point in time by which the algorithm should finish
	 */
    @Override
	public void runBranchAndPrice(long timeLimit){
		notifier.fireStartBAPEvent(); //Signal start Branch-and-Price process
		this.runtime=System.currentTimeMillis();

		//Check whether an warm start is provided, if not, invoke generateInitialFeasibleSolution
		BAPNode<SNDRC, Cycle> rootNode = queue.peek();
		if(rootNode.getInitialColumns().isEmpty())
			rootNode.addInitialColumns(this.generateInitialFeasibleSolution(rootNode));

		//Start processing nodes until the queue is empty
		while(!queue.isEmpty()){
			BAPNode<SNDRC, Cycle> bapNode = queue.poll();
			notifier.fireNextNodeEvent(bapNode);

			//Prune this node if its bound is worse than the best found solution. Since all solutions are integral, we may round up/down, depending on the optimization sense
			if(this.nodeCanBePruned(bapNode)){
				notifier.firePruneNodeEvent(bapNode, bapNode.getBound());
				nodesProcessed++;
				continue;
			}
			
			graphManipulator.next(bapNode); //Prepare data structures for the next node

			//Generate an initial solution for this node to guarantee that the master problem is feasible
			if(bapNode.nodeID != 0){
				bapNode.addInitialColumns(this.generateInitialFeasibleSolution(bapNode));
			}

			//Solve the next BAPNode
			try {
				this.solveBAPNode(bapNode, timeLimit);
			} catch (TimeLimitExceededException e) {
				queue.add(bapNode);
				notifier.fireTimeOutEvent(bapNode);
				break;
			}

			//Prune this node if its bound is worse than the best found solution. Since all solutions are integral, we may round up/down, depending on the optimization sense
			if(this.nodeCanBePruned(bapNode)){
				notifier.firePruneNodeEvent(bapNode, bapNode.getBound());
				nodesProcessed++;
				continue;
			}
			
			//Check whether the node is infeasible, i.e. whether there are artifical columns in the solution. If so, ignore it and continue with the next node.
			if(this.isInfeasibleNode(bapNode)){
				notifier.fireNodeIsInfeasibleEvent(bapNode);
				nodesProcessed++;
				continue;
			}

			//If solution is integral, check whether it is better than the current best solution
			if(this.isIntegerNode(bapNode)){
				int integerObjective=MathProgrammingUtil.doubleToInt(bapNode.getObjective());
				notifier.fireNodeIsIntegerEvent(bapNode, bapNode.getBound(), integerObjective);
				if(optimizationSenseMaster == OptimizationSense.MINIMIZE && integerObjective < this.upperBoundOnObjective){
					this.objectiveIncumbentSolution = integerObjective;
					this.upperBoundOnObjective = integerObjective;
					this.incumbentSolution =bapNode.getSolution();
				}else if(optimizationSenseMaster == OptimizationSense.MAXIMIZE && integerObjective > this.lowerBoundOnObjective){
					this.objectiveIncumbentSolution = integerObjective;
					this.lowerBoundOnObjective = integerObjective;
					this.incumbentSolution =bapNode.getSolution();
				}
			}else{ //We need to branch
				
//----------------------------------------------------------------------------------------------------------------------------------//
				
				// An acceleration technique for ub
				this.AccelerationForUB(bapNode);
				
				
				
				notifier.fireNodeIsFractionalEvent(bapNode, bapNode.getBound(), bapNode.getObjective());
				List<BAPNode<SNDRC, Cycle>> newBranches=new ArrayList<>();
				for(AbstractBranchCreator<SNDRC, Cycle, SNDRCPricingProblem> bc : branchCreators){
					newBranches.addAll(bc.branch(bapNode));
					if(!newBranches.isEmpty()) break;
				}
				
				if(newBranches.isEmpty())
					throw new RuntimeException("BAP encountered fractional solution, but non of the BranchCreators produced any new branches?");
				else {
					queue.addAll(newBranches);
					notifier.fireBranchEvent(bapNode, Collections.unmodifiableList(newBranches));
				}
			}

			nodesProcessed++;
		}
		
		//Update statistics
		if(queue.isEmpty()){ //Problem solved to optimality
			this.isOptimal=true;
			if(optimizationSenseMaster == OptimizationSense.MINIMIZE)
				this.lowerBoundOnObjective=this.objectiveIncumbentSolution;
			else
				this.upperBoundOnObjective=this.objectiveIncumbentSolution;
		}else{ //Problem NOT solved to optimality
			this.isOptimal=false;
			if(optimizationSenseMaster == OptimizationSense.MINIMIZE) {
				lowerBoundOnObjective = queue.peek().getBound();
				for (BAPNode bapNode : queue) {
					lowerBoundOnObjective = Math.min(lowerBoundOnObjective, bapNode.getBound());
				}
			}else{
				upperBoundOnObjective = queue.peek().getBound();
				for (BAPNode bapNode : queue) {
					upperBoundOnObjective = Math.max(upperBoundOnObjective, bapNode.getBound());
				}
			}
		}
		notifier.fireStopBAPEvent(); //Signal that BAP has been completed
		this.runtime=System.currentTimeMillis()-runtime;
	}
    
    
    public void AccelerationForUB(BAPNode<SNDRC, Cycle> bapNode) {
    	List<Cycle> solution=bapNode.getSolution();
    	
    	Set<IloRange> fixVarConstraints=new HashSet<>();
    	while(!this.isIntegerNode(bapNode)) {
    		boolean ifAllBelowThresholdValue=true;
    		for(Cycle cycle:solution) {
    			
    			if(MathProgrammingUtil.isFractional(cycle.value)) {
    				double decimalValue=cycle.value-(int)cycle.value;
    				if(decimalValue>thresholdValue) {
    					ifAllBelowThresholdValue=false;
    					IloRange fixConstraint=
    				}
    			}
    		
    			
    		}
    	}
    	
    }
    

    
    
    
	
}
