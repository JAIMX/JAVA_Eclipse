package mTSP_GA;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.Scanner;

public class ReadData {

    private double[][] distance;
    private int[] x, y;
    private File file;
    private int numOfCity;
    private String calculateWay;
    private String fileName;

    public ReadData(String fileName, int numOfCity, String calWay) {
        distance = new double[numOfCity][numOfCity];
        x = new int[numOfCity];
        y = new int[numOfCity];
        file = new File(fileName);
        this.numOfCity = numOfCity;
        calculateWay = calWay;
        this.fileName = fileName;
    }

    public double[][] read() throws IOException {
        if (calculateWay == "NORMAL") {
            Scanner in = new Scanner(Paths.get(fileName));
            int n = in.nextInt();
            for (int i = 0; i < numOfCity; i++) {
                for (int j = i + 1; j < numOfCity; j++) {
                    distance[i][j] = in.nextInt();
                    distance[j][i] = distance[i][j];
                }
            }
        } else {
            BufferedReader reader = new BufferedReader(new FileReader(file));
            String tempString = reader.readLine();
            while (tempString.charAt(0) >= 'A' && tempString.charAt(0) <= 'Z') {
                tempString = reader.readLine();
            }

            // record x and y
            String[] arr;
            for (int i = 0; i < numOfCity; i++) {
                arr = tempString.split("\\s+");
                y[i] = Integer.parseInt(arr[arr.length - 1]);
                x[i] = Integer.parseInt(arr[arr.length - 2]);
                tempString = reader.readLine();
            }

            // calculate distance
            if (calculateWay == "ATT") {
                int xd, yd, tij, dij;
                double rij;
                for (int i = 0; i < numOfCity; i++) {
                    for (int j = 0; j < numOfCity; j++) {
                        xd = x[i] - x[j];
                        yd = y[i] - y[j];
                        rij = Math.sqrt((xd * xd + yd * yd) / 10.0);
                        dij = (int) Math.ceil(rij);
                        distance[i][j] = dij;
                        distance[j][i] = dij;

                    }
                }
            }

            if (calculateWay == "EUC") {
                int xd, yd, dij;
                double tij;
                for (int i = 0; i < numOfCity; i++) {
                    for (int j = 0; j < numOfCity; j++) {
                        xd = x[i] - x[j];
                        yd = y[i] - y[j];
                        tij = Math.sqrt(xd * xd + yd * yd);
                        dij = (int) Math.round(tij);
                        distance[i][j] = dij;
                        distance[j][i] = dij;

                    }
                }
            }
        }
        
        distance[0][0]=Double.MAX_VALUE;

        return distance;

    }

    public static void main(String[] args) throws IOException {

        // ReadData test=new ReadData("./data/bier127.tsp", 127);
         ReadData test = new ReadData("./data/att48.tsp", 48, "ATT");
        //ReadData test = new ReadData("./data/tsp29.txt", 29, "NORMAL");
        double[][] result = test.read();
        System.out.println(Arrays.toString(result[1]));

    }
}
